---
interface Props {
  src: string
  alt: string
  width?: number | string
  height?: number | string
  placeholder?: string
  lazy?: boolean
  [key: string]: any
}

const {
  src,
  alt,
  width,
  height,
  placeholder = '/placeholder.webp',
  lazy = true,
  ...rest
} = Astro.props

const data = lazy
  ? {
    'data-src': src,
    'src': placeholder,
    'loading': 'lazy',
  }
  : {
    src,
  }
---

<img
  alt={alt}
  width={width}
  height={height}
  decoding="async"
  {...(data as any)}
  {...rest}
/>

<script>
const imgObserver = new IntersectionObserver((entries) => {
  entries.forEach((entry) => {
    if (entry.isIntersecting) {
      const img = entry.target as HTMLImageElement
      const src = img.dataset.src!
      img.setAttribute('src', src)
      img.removeAttribute('data-src')
      imgObserver.unobserve(img)
    }
  })
})

function loadImgs() {
  const imgs = document.querySelectorAll('img')
  imgs.forEach((img) => {
    if (img.dataset.src)
      imgObserver.observe(img)
  })
}

loadImgs()

document.addEventListener('astro:after-swap', () => {
  loadImgs()
})
</script>
